CRIANDO NÓS ALUNOS----

LOAD CSV WITH HEADERS FROM 'file:///aluno_202411061912.csv' AS row
CREATE(p:Aluno {id_alunos: toInteger(row.id_alunos), nome_aluno: row.nome_aluno})


CRIANDO NÓS PROFESSOR---------


LOAD CSV WITH HEADERS FROM 'file:///professor_202411061912.csv' AS row
CREATE(p:Professor {id_professor: toInteger(row.id_professor), nome_professor: row.nome_professor, dep_id: toInteger(row.dep_id)})



CRIANDO NÓS DEPARTAMENTO -----------


LOAD CSV WITH HEADERS FROM 'file:///departamento_202411061912.csv' AS row
CREATE (:Departamento {id: toInteger(row.dep_id), nome: row.nome_dep, chefe_id: toInteger(row.chefe_dep_id)});



CRIANDO ARESTAS DEPARTAMENTO PROFESSOR ---------


MATCH (p:Professor), (d:Departamento)
WHERE p.dep_id = d.id
CREATE (p)-[:PERTENCE_A]->(d);


CRIANDO NÓS PARA CURSOS -------


LOAD CSV WITH HEADERS FROM 'file:///cursos_202411061912.csv' AS row
CREATE (:Curso {cod_curso: toInteger(row.cod_curso), nome_curso: row.nome_curso});


CRIANDO OS NÓS DISCIPLINA----------

LOAD CSV WITH HEADERS FROM 'file:///disciplinas_202411061912.csv' AS row
CREATE (:Disciplina {cod_disc: toInteger(row.cod_disc), nome_disc: row.nome_disc});



CRIANDO ARESTA CHEFE DE DEPARTAMENTO -----------

MATCH (p:Professor), (d:Departamento)
WHERE p.id_professor = d.chefe_id
CREATE (p)-[:É_CHEFE_DE]->(d);


CRIANDO ARESTA CURSO ------------

LOAD CSV WITH HEADERS FROM 'file:///matriz_cursos_202411061912.csv' AS row
MATCH (d:Disciplina {cod_disc: toInteger(row.cod_disc)})
MATCH (c:Curso {cod_curso: toInteger(row.cod_curso)})
CREATE (d)-[:FAZ_PARTE_DE]->(c);



CRIANDO ARESTAS ALUNOS CURSANDO---------


LOAD CSV WITH HEADERS FROM 'file:///alunos_cursando_202411061912.csv' AS row
MATCH (a:Aluno {id_alunos: toInteger(row.id_aluno)})
MATCH (c:Curso {cod_curso: toInteger(row.id_curso)})
MATCH (d:Disciplina {cod_disc: toInteger(row.cod_disc)})

MERGE (a)-[r1:CURSANDO {semestre: row.semestre, ano: toInteger(row.ano), nota: toFloat(row.nota)}]->(c)
MERGE (a)-[r2:INSCRITO_EM {semestre: row.semestre, ano: toInteger(row.ano), nota: toFloat(row.nota)}]->(d);



DELETAR DUPLICIDADE---------

MATCH (a:Aluno)-[r:CURSANDO]->(c:Curso)
WITH a, c, COUNT(r) AS rel_count, COLLECT(r) AS relacoes
WHERE rel_count > 1
FOREACH (rel IN relacoes[1..] | DELETE rel);


CRIANDO NÓ TCC ------

LOAD CSV WITH HEADERS FROM 'file:///alunos_tcc_202411061912.csv' AS row
MERGE (t:TCC {id_tcc: toInteger(row.id_tcc)})



CRIANDO ARESTAS PARA GRUPO DE TCC ---------

LOAD CSV WITH HEADERS FROM 'file:///alunos_tcc_202411061912.csv' AS row
MATCH (a:Aluno {id_alunos: toInteger(row.id_aluno)})
MATCH (t:TCC {id_tcc: toInteger(row.id_tcc)})
MERGE (a)-[:GRUPO_DE_TCC]->(t);



CRIANDO ARESTA ORIENTADOR DE TCC -----------

LOAD CSV WITH HEADERS FROM 'file:///alunos_tcc_202411061912.csv' AS row
MATCH (t:TCC {id_tcc: toInteger(row.id_tcc)})
MATCH (p:Professor {id_professor: toInteger(row.id_professor)})
MERGE (p)-[:ORIENTADOR_DO_GRUPO]->(t);



CRIANDO DISCIPLINAS PROFESSOR ----------

LOAD CSV WITH HEADERS FROM 'file:///professor_aulas_202411061912.csv' AS row
MATCH (a:Professor {id_professor: toInteger(row.id_professor)})
MATCH (c:Curso {cod_curso: toInteger(row.id_curso)})
MATCH (d:Disciplina {cod_disc: toInteger(row.cod_disc)})

MERGE (a)-[r1:Lesionando {semestre: row.semestre, ano: toInteger(row.ano)}]->(d)